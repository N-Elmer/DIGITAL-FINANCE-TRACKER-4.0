#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Jan 30, 2021 08:08:40 AM WAT  platform: Windows NT
#    Jan 30, 2021 08:27:12 AM WAT  platform: Windows NT
#    Jan 31, 2021 05:13:02 PM WAT  platform: Windows NT
#    Jan 31, 2021 06:55:56 PM WAT  platform: Windows NT
#    Feb 02, 2021 10:52:44 AM WAT  platform: Windows NT
#    Feb 02, 2021 12:05:29 PM WAT  platform: Windows NT

import sys
import random
import sqlite3
from matplotlib import style
style.use ('fivethirtyeight')
import matplotlib.pyplot as plt

import ewallet
from ewallet import Toplevel1

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

conn = sqlite3.connect("ManageTransaction.db")
c = conn.cursor()
c.execute("CREATE TABLE IF NOT EXISTS TransactionTable (Id INTEGER PRIMARY KEY, Date TEXT, Income INTEGER, IncomeRemarks TEXT, Expenditure INTEGER, ExpenditureRemarks TEXT)")

"""
def set_Tk_var():
    global ExpenditureDisplayVar
    ExpenditureDisplayVar = tk.StringVar()
    ExpenditureDisplayVar.set('')

    global BalanceDisplayVar
    BalanceDisplayVar = tk.StringVar()
    BalanceDisplayVar.set('')

    global IncomeDisplayVar
    IncomeDisplayVar = tk.StringVar()
    IncomeDisplayVar.set('')

    global ExpenditureDisplayLabel
    ExpenditureDisplayLabel = tk.StringVar()
    ExpenditureDisplayLabel.set('')

    global BalanceDisplayLabel
    BalanceDisplayLabel = tk.StringVar()
    BalanceDisplayLabel.set('')

    global DateEntryVar
    DateEntryVar = tk.StringVar()
    DateEntryVar.set("01/12/2021")
    global IncomeEntryVar
    IncomeEntryVar = tk.IntVar()
    IncomeEntryVar.set("250000")
    global IncomeRemarksEntryVar
    IncomeRemarksEntryVar = tk.StringVar()
    IncomeRemarksEntryVar.set("Salary")
    global ExpenditureEntryVar
    ExpenditureEntryVar = tk.IntVar()
    ExpenditureEntryVar.set("50000")
    global ExpenditureRemarksEntryVar
    ExpenditureRemarksEntryVar = tk.StringVar()
    ExpenditureRemarksEntryVar.set("Bills")
"""

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def AnalyticsButtonCommand():
    c.execute("SELECT Date, Income, Expenditure FROM TransactionTable")
    data = c.fetchall()
        
    Date = []
    Income = []
    Expenditure = []
        
    for row in data:
        Date.append(row[0])
        Income.append(row[1])
        Expenditure.append(row[2])
        
    plt.plot(Date,Income,"-",label="Income")
    plt.plot(Date,Expenditure,"--",label="Expenditure")
    leg = plt.legend();
    plt.show()
        
    print("")
    print("")
    
    sys.stdout.flush()

"""
def DeleteButtonCommand():

    sys.stdout.flush()
"""

"""
def SubmitButtonCommand():
    conn = sqlite3.connect("ManageTransaction.db")
    c = conn.cursor()
    
    MinId = 1000
    # MinId means Minimum Transaction Id Value
    MaxID = 2000
    # MaxId means Maximum Transaction Id Value
    IdRange = [i for i in range(MinId, MaxID+1)]
    # IdRange is the range formed by the MaxId and MinId Values
    random.shuffle(IdRange)
    id = IdRange[0]
    
    c.execute("INSERT INTO TransactionTable VALUES (:Id, :Date, :Income, :IncomeRemarks, :Expenditure, :ExpenditureRemarks)",
            {
                "Id": id,
                "Date": DateEntryVar.get(),
                "Income": IncomeEntryVar.get(),
                "IncomeRemarks": IncomeRemarksEntryVar.get(),
                "Expenditure": ExpenditureEntryVar.get(),
                "ExpenditureRemarks": ExpenditureRemarksEntryVar.get()
            }
    )
    
    DateEntryVar.set("")
    IncomeEntryVar.set("")
    IncomeRemarksEntryVar.set("")
    ExpenditureEntryVar.set("")
    ExpenditureRemarksEntryVar.set("")
    
    if conn:
        conn.commit()
        c.close()
        conn.close()
        
    sys.stdout.flush()
"""

"""
def ClearButtonCommand():
    DateEntryVar.set("")
    IncomeEntryVar.set("")
    IncomeRemarksEntryVar.set("")
    ExpenditureEntryVar.set("")
    ExpenditureRemarksEntryVar.set("")

    sys.stdout.flush()
"""

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import ewallet
    ewallet.vp_start_gui()
    
    if conn:
        conn.commit()
        c.close()
        conn.close()





